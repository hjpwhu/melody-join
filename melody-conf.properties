# the configurations for the melody.jar
# all parameters shall be filled as there is no default value

# GENERATE CONFIGURATION

# {local, hdfs, mr}
generate.mode=local

# {String value}, e.g., hdfs://localhost:50080
generate.hdfs.name=

# {String value} the local/hdfs path to the input image directory
generate.input.image.dir=

# {String value} the local/hdfs path to the output histogram directory
generate.output.hist.dir=

# {acc/cedd/ch/cl/eh/fcth/gabor/hcedd/jcd/jh/jch/ll/oh/phog/sc/tamura} feature name separated by "/"
# acc: Auto Color Correlogram
# cedd: Color and Edge Directivity Descriptor 
# ch: Simple Color Histogram
# cl: Color Layout Histogram Descriptor
# eh: Edge Histogram Descriptor
# FCTH: Fuzzy Color and Texture Histogram
# gabor: Gabor Filter Feature
# hcedd: Hashing based Color and Edge Directivity Descriptor
# jcd: Joint descriptor of CEDD and FCTH
# jch: Jpeg Coefficient Histogram
# jh: Joint Histogram 
# ll: Luminance Layout
# oh: Opponent Histogram
# phog: Pyramid of Histogram of Gradients
# sc: Scalable Color Histogram
# tamura: Tamura's Texture Feature
generate.enabled.features=acc/cedd/ch/cl/eh/fcth/gabor/hcedd/jcd/jh/jch/ll/oh/phog/sc/tamura

# {integer value} each image will be split into granularity x granularity tiles (numer of bins) 
generate.grid.granularity=10

# JOIN CONFIGURATION

# {true, false} whether to cache the input data in main memory when executing bsp
bsp.cached=true

# {integer value} how many messages (number of records) are sent by each peer in one supersetp in bsp
bsp.batch.message=10

# {String value} the hdfs path to the commons-math3 dependency, used for computing EMD
dependency.math.hdfs.path=

# {integer value} the dimension of the input histograms
data.dimension=3

# {integer value} the number of bins of the input histograms
data.bin.number=30

# {String value} the hdfs path to the input histograms
data.input.hdfs.path=

# {String value} the hdfs path of the output results
data.output.hdfs.path=

# {String value} the hdfs path to the bins 
data.bin.hdfs.path=

# {String value} the hdfs path to the projection vectors (used by projection and normal lower bounds)
melody.project.vector.hdfs.path=

# {integer value} the number of projection vectors to be used
melody.project.vector.number=3

# {integer value} the error interval of normal lower bound
melody.normal.error.interval=5

# {integer value} the grid granularity of the MELODY-Join framework
melody.grid.cell.granularity=4

# {double value < 1.0} the sample ratio of the MELODY-Join framework
melody.sample.ratio=0.001

# {distance, topk} the type of join to be executed
melody.join.type=topk

# {double value} the threshold value of the distance join
melody.join.distance.threshold=0.05

# {integer value} the k value of the topk join
melody.join.k=20

# {melody, mrsim, bspmelody, bspb} type of method to be used, melody is MELODY-Join, mrsim is MRSimJoin, bspmeldoy is MELDOY-Join BSP implementation, bspb is the BSP baseline method
mr.method.name=bspb

# {integer value} the number of pivots for the MRSimJoin method
mrsim.pivot.number=10

# {integer value} the number of available task slots
parallel.task.number=48